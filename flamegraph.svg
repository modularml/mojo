<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="454.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="437" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="437" > </text>
<g id="frames">
<g >
<title>[libc.so.6] (1,022,022,021 samples, 0.96%)</title><rect x="37.0" y="309" width="11.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="39.99" y="319.5" ></text>
</g>
<g >
<title>snprintf (10,010,010 samples, 0.01%)</title><rect x="34.2" y="341" width="0.1" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="37.16" y="351.5" ></text>
</g>
<g >
<title>unmap_page_range (38,038,038 samples, 0.04%)</title><rect x="29.3" y="149" width="0.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="32.33" y="159.5" ></text>
</g>
<g >
<title>__do_sys_brk (22,022,022 samples, 0.02%)</title><rect x="19.5" y="229" width="0.3" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="22.55" y="239.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;M::AsyncRT::Detail::RuntimeTable::getSingleton (61,061,061 samples, 0.06%)</title><rect x="1189.3" y="373" width="0.7" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1192.32" y="383.5" ></text>
</g>
<g >
<title>M::AsyncRT::Globals::getCurrentRuntimeInTLS (96,096,096 samples, 0.09%)</title><rect x="33.1" y="341" width="1.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="36.05" y="351.5" ></text>
</g>
<g >
<title>vma_alloc_folio (90,090,090 samples, 0.08%)</title><rect x="20.9" y="197" width="1.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="23.91" y="207.5" ></text>
</g>
<g >
<title>stdlib::builtin::string::String::_unsafe_to_formatter (104,104,104 samples, 0.10%)</title><rect x="120.0" y="341" width="1.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="123.04" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (45,045,045 samples, 0.04%)</title><rect x="29.2" y="277" width="0.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="32.25" y="287.5" ></text>
</g>
<g >
<title>KGEN_CompilerRT_AlignedFree (667,667,667 samples, 0.63%)</title><rect x="22.3" y="373" width="7.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="25.33" y="383.5" ></text>
</g>
<g >
<title>mas_store_prealloc (9,009,009 samples, 0.01%)</title><rect x="19.6" y="197" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="22.59" y="207.5" ></text>
</g>
<g >
<title>free@plt (11,011,011 samples, 0.01%)</title><rect x="1188.8" y="373" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1191.83" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (101,101,101 samples, 0.10%)</title><rect x="47.0" y="277" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="50.01" y="287.5" ></text>
</g>
<g >
<title>snprintf (1,072,072,071 samples, 1.01%)</title><rect x="36.4" y="325" width="11.9" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="39.43" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (310,310,310 samples, 0.29%)</title><rect x="26.3" y="341" width="3.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="29.30" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (28,028,028 samples, 0.03%)</title><rect x="24.7" y="357" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="27.65" y="367.5" ></text>
</g>
<g >
<title>stdlib::builtin::string::String::__iadd__ (557,557,557 samples, 0.53%)</title><rect x="101.1" y="341" width="6.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="104.14" y="351.5" ></text>
</g>
<g >
<title>do_anonymous_page (110,110,110 samples, 0.10%)</title><rect x="224.4" y="229" width="1.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="227.38" y="239.5" ></text>
</g>
<g >
<title>handle_pte_fault (112,112,112 samples, 0.11%)</title><rect x="224.4" y="245" width="1.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="227.38" y="255.5" ></text>
</g>
<g >
<title>handle_mm_fault (119,119,119 samples, 0.11%)</title><rect x="224.3" y="277" width="1.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="227.30" y="287.5" ></text>
</g>
<g >
<title>stdlib::utils::variant::Variant::_size (212,212,212 samples, 0.20%)</title><rect x="1184.8" y="341" width="2.4" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1187.79" y="351.5" ></text>
</g>
<g >
<title>exc_page_fault (227,227,227 samples, 0.21%)</title><rect x="19.8" y="309" width="2.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="22.80" y="319.5" ></text>
</g>
<g >
<title>stdlib::builtin::string_literal::StringLiteral::unsafe_cstr_ptr (14,014,014 samples, 0.01%)</title><rect x="127.0" y="341" width="0.2" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="130.02" y="351.5" ></text>
</g>
<g >
<title>__alloc_pages (89,089,089 samples, 0.08%)</title><rect x="20.9" y="165" width="1.0" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="23.93" y="175.5" ></text>
</g>
<g >
<title>__handle_mm_fault (116,116,116 samples, 0.11%)</title><rect x="224.3" y="261" width="1.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="227.33" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (67,067,067 samples, 0.06%)</title><rect x="28.5" y="325" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="31.50" y="335.5" ></text>
</g>
<g >
<title>stdlib::builtin::simd::_format_scalar[::DType,::StringLiteral] (4,698,698,694 samples, 4.43%)</title><rect x="48.6" y="341" width="52.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="51.59" y="351.5" >stdli..</text>
</g>
<g >
<title>stdlib::utils::variant::Variant::_check[::CollectionElement] (10,010,010 samples, 0.01%)</title><rect x="1184.3" y="341" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1187.27" y="351.5" ></text>
</g>
<g >
<title>x64_sys_call (45,045,045 samples, 0.04%)</title><rect x="29.2" y="261" width="0.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="32.25" y="271.5" ></text>
</g>
<g >
<title>stdlib::collections::list::List::reserve (47,047,047 samples, 0.04%)</title><rect x="1129.8" y="341" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1132.80" y="351.5" ></text>
</g>
<g >
<title>malloc (818,818,818 samples, 0.77%)</title><rect x="13.2" y="357" width="9.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="16.23" y="367.5" ></text>
</g>
<g >
<title>stdlib::collections::list::List::_realloc (80,784,784,704 samples, 76.09%)</title><rect x="225.7" y="341" width="897.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="228.70" y="351.5" >stdlib::collections::list::List::_realloc</text>
</g>
<g >
<title>get_mem_cgroup_from_mm (10,010,010 samples, 0.01%)</title><rect x="20.5" y="197" width="0.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="23.50" y="207.5" ></text>
</g>
<g >
<title>M::AsyncRT::Globals::getRuntimeTableSingleton (78,078,078 samples, 0.07%)</title><rect x="30.2" y="373" width="0.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="33.23" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_brk (45,045,045 samples, 0.04%)</title><rect x="29.2" y="245" width="0.5" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="32.25" y="255.5" ></text>
</g>
<g >
<title>M::AsyncRT::Detail::RuntimeTable::getRuntime (43,043,043 samples, 0.04%)</title><rect x="29.7" y="373" width="0.5" height="15.0" fill="rgb(228,105,25)" rx="2" ry="2" />
<text  x="32.75" y="383.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (90,090,090 samples, 0.08%)</title><rect x="20.9" y="181" width="1.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="23.91" y="191.5" ></text>
</g>
<g >
<title>cfree (428,428,428 samples, 0.40%)</title><rect x="25.0" y="357" width="4.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="27.99" y="367.5" ></text>
</g>
<g >
<title>trying_stuff (106,168,168,062 samples, 100.00%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >trying_stuff</text>
</g>
<g >
<title>stdlib::builtin::string::String::__init__ (1,143,143,142 samples, 1.08%)</title><rect x="107.3" y="341" width="12.7" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="110.34" y="351.5" ></text>
</g>
<g >
<title>stdlib::collections::list::List::resize (4,736,736,732 samples, 4.46%)</title><rect x="1130.3" y="341" width="52.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1133.32" y="351.5" >stdli..</text>
</g>
<g >
<title>stdlib::collections::list::List::__moveinit__ (250,250,250 samples, 0.24%)</title><rect x="222.9" y="341" width="2.8" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="225.92" y="351.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (158,158,158 samples, 0.15%)</title><rect x="223.9" y="325" width="1.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="226.94" y="335.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (227,227,227 samples, 0.21%)</title><rect x="19.8" y="325" width="2.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="22.80" y="335.5" ></text>
</g>
<g >
<title>folio_add_lru_vma (12,012,012 samples, 0.01%)</title><rect x="225.4" y="213" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="228.39" y="223.5" ></text>
</g>
<g >
<title>all (106,168,168,062 samples, 100%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>strchrnul@plt (18,018,018 samples, 0.02%)</title><rect x="48.1" y="293" width="0.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="51.15" y="303.5" ></text>
</g>
<g >
<title>malloc (11,011,011 samples, 0.01%)</title><rect x="1189.0" y="373" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.95" y="383.5" ></text>
</g>
<g >
<title>stdlib::utils::string_slice::StringSlice::_strref_dangerous (36,036,036 samples, 0.03%)</title><rect x="1183.7" y="341" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1186.69" y="351.5" ></text>
</g>
<g >
<title>stdlib::collections::list::List::__init__ (187,187,187 samples, 0.18%)</title><rect x="220.4" y="341" width="2.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="223.43" y="351.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (10,010,010 samples, 0.01%)</title><rect x="29.6" y="37" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="32.59" y="47.5" ></text>
</g>
<g >
<title>get_page_from_freelist (84,084,084 samples, 0.08%)</title><rect x="20.9" y="149" width="1.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="23.95" y="159.5" ></text>
</g>
<g >
<title>_start (104,115,115,011 samples, 98.07%)</title><rect x="31.2" y="373" width="1157.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="34.23" y="383.5" >_start</text>
</g>
<g >
<title>brk (45,045,045 samples, 0.04%)</title><rect x="29.2" y="309" width="0.5" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="32.25" y="319.5" ></text>
</g>
<g >
<title>vma_alloc_folio (58,058,058 samples, 0.05%)</title><rect x="224.7" y="197" width="0.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="227.75" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (18,018,018 samples, 0.02%)</title><rect x="36.2" y="325" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="39.23" y="335.5" ></text>
</g>
<g >
<title>do_user_addr_fault (225,225,225 samples, 0.21%)</title><rect x="19.8" y="293" width="2.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="22.80" y="303.5" ></text>
</g>
<g >
<title>stdlib::utils::_format::Formatter::__init__ (51,051,051 samples, 0.05%)</title><rect x="1183.0" y="341" width="0.6" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1186.00" y="351.5" ></text>
</g>
<g >
<title>release_pages (16,016,016 samples, 0.02%)</title><rect x="29.6" y="53" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="32.56" y="63.5" ></text>
</g>
<g >
<title>KGEN_CompilerRT_AlignedAlloc (1,016,016,015 samples, 0.96%)</title><rect x="11.0" y="373" width="11.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="14.03" y="383.5" ></text>
</g>
<g >
<title>cfree (38,038,038 samples, 0.04%)</title><rect x="1188.4" y="373" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1191.41" y="383.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (56,056,056 samples, 0.05%)</title><rect x="224.7" y="181" width="0.7" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="227.75" y="191.5" ></text>
</g>
<g >
<title>KGEN_CompilerRT_AlignedAlloc (88,088,088 samples, 0.08%)</title><rect x="31.2" y="341" width="1.0" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="34.23" y="351.5" ></text>
</g>
<g >
<title>unmap_region (43,043,043 samples, 0.04%)</title><rect x="29.3" y="197" width="0.4" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="32.27" y="207.5" ></text>
</g>
<g >
<title>__handle_mm_fault (172,172,172 samples, 0.16%)</title><rect x="20.3" y="261" width="1.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="23.32" y="271.5" ></text>
</g>
<g >
<title>stdlib::utils::variant::Variant::_get_ptr[::CollectionElement] (9,009,009 samples, 0.01%)</title><rect x="1184.4" y="341" width="0.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1187.38" y="351.5" ></text>
</g>
<g >
<title>x64_sys_call (23,023,023 samples, 0.02%)</title><rect x="19.5" y="261" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="22.55" y="271.5" ></text>
</g>
<g >
<title>stdlib::collections::list::List::append (559,559,559 samples, 0.53%)</title><rect x="1123.6" y="341" width="6.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1126.58" y="351.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (20,020,020 samples, 0.02%)</title><rect x="20.6" y="197" width="0.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="23.61" y="207.5" ></text>
</g>
<g >
<title>trying_stuff::benchmark_1 (86,086,086 samples, 0.08%)</title><rect x="1187.2" y="341" width="1.0" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1190.24" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (23,023,023 samples, 0.02%)</title><rect x="19.5" y="277" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="22.55" y="287.5" ></text>
</g>
<g >
<title>alloc_anon_folio (90,090,090 samples, 0.08%)</title><rect x="20.9" y="213" width="1.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="23.91" y="223.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (14,014,014 samples, 0.01%)</title><rect x="224.5" y="197" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="227.49" y="207.5" ></text>
</g>
<g >
<title>unmap_vmas (38,038,038 samples, 0.04%)</title><rect x="29.3" y="181" width="0.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="32.33" y="191.5" ></text>
</g>
<g >
<title>brk (27,027,027 samples, 0.03%)</title><rect x="19.5" y="309" width="0.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="22.50" y="319.5" ></text>
</g>
<g >
<title>clear_page_erms (71,071,071 samples, 0.07%)</title><rect x="21.0" y="133" width="0.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="24.00" y="143.5" ></text>
</g>
<g >
<title>handle_mm_fault (175,175,175 samples, 0.16%)</title><rect x="20.3" y="277" width="2.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="23.31" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (865,865,865 samples, 0.82%)</title><rect x="38.5" y="293" width="9.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="41.53" y="303.5" ></text>
</g>
<g >
<title>stdlib::builtin::int::Int::format_to (25,025,025 samples, 0.02%)</title><rect x="35.2" y="341" width="0.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="38.20" y="351.5" ></text>
</g>
<g >
<title>stdlib::builtin::str::str[::Stringable] (21,021,021 samples, 0.02%)</title><rect x="100.8" y="341" width="0.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="103.82" y="351.5" ></text>
</g>
<g >
<title>folio_add_lru (12,012,012 samples, 0.01%)</title><rect x="225.4" y="197" width="0.1" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="228.39" y="207.5" ></text>
</g>
<g >
<title>do_vmi_align_munmap (45,045,045 samples, 0.04%)</title><rect x="29.2" y="213" width="0.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="32.25" y="223.5" ></text>
</g>
<g >
<title>do_anonymous_page (152,152,152 samples, 0.14%)</title><rect x="20.5" y="229" width="1.7" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="23.48" y="239.5" ></text>
</g>
<g >
<title>__do_sys_brk (45,045,045 samples, 0.04%)</title><rect x="29.2" y="229" width="0.5" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="32.25" y="239.5" ></text>
</g>
<g >
<title>stdlib::collections::list::List::__copyinit__ (323,323,323 samples, 0.30%)</title><rect x="127.2" y="341" width="3.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="130.23" y="351.5" ></text>
</g>
<g >
<title>stdlib::utils::variant::Variant::_get_state[__mlir_type.i1,__mlir_type.!lit.lifetime&lt;* (28,028,028 samples, 0.03%)</title><rect x="1184.5" y="341" width="0.3" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1187.48" y="351.5" ></text>
</g>
<g >
<title>__x64_sys_brk (23,023,023 samples, 0.02%)</title><rect x="19.5" y="245" width="0.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="22.55" y="255.5" ></text>
</g>
<g >
<title>stdlib::builtin::io::_snprintf[::StringLiteral,*::AnyType] (1,158,158,157 samples, 1.09%)</title><rect x="35.5" y="341" width="12.8" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="38.48" y="351.5" ></text>
</g>
<g >
<title>stdlib::builtin::string_literal::StringLiteral::__str__ (331,331,331 samples, 0.31%)</title><rect x="123.3" y="341" width="3.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="126.34" y="351.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (38,038,038 samples, 0.04%)</title><rect x="29.3" y="133" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="32.33" y="143.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (45,045,045 samples, 0.04%)</title><rect x="29.2" y="293" width="0.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="32.25" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (609,609,609 samples, 0.57%)</title><rect x="15.6" y="341" width="6.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.55" y="351.5" ></text>
</g>
<g >
<title>stdlib::collections::list::List::__getitem__[__mlir_type.i1,__mlir_type.!lit.lifetime&lt;* (1,227,227,226 samples, 1.16%)</title><rect x="206.8" y="341" width="13.6" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="209.79" y="351.5" ></text>
</g>
<g >
<title>folio_batch_move_lru (12,012,012 samples, 0.01%)</title><rect x="225.4" y="181" width="0.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="228.39" y="191.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (11,011,011 samples, 0.01%)</title><rect x="225.4" y="165" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="228.40" y="175.5" ></text>
</g>
<g >
<title>stdlib::builtin::builtin_list::_LITRefPackHelper::get_as_kgen_pack (11,011,011 samples, 0.01%)</title><rect x="34.3" y="341" width="0.1" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="37.28" y="351.5" ></text>
</g>
<g >
<title>__default_morecore (45,045,045 samples, 0.04%)</title><rect x="29.2" y="325" width="0.5" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="32.25" y="335.5" ></text>
</g>
<g >
<title>stdlib::builtin::io::_snprintf_scalar[::DType,::StringLiteral] (22,022,022 samples, 0.02%)</title><rect x="48.3" y="341" width="0.3" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="51.35" y="351.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (17,017,017 samples, 0.02%)</title><rect x="29.6" y="101" width="0.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="32.56" y="111.5" ></text>
</g>
<g >
<title>__alloc_pages (54,054,054 samples, 0.05%)</title><rect x="224.7" y="165" width="0.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="227.75" y="175.5" ></text>
</g>
<g >
<title>unmap_single_vma (38,038,038 samples, 0.04%)</title><rect x="29.3" y="165" width="0.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="32.33" y="175.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (25,025,025 samples, 0.02%)</title><rect x="224.4" y="213" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="227.41" y="223.5" ></text>
</g>
<g >
<title>zap_pte_range (30,030,030 samples, 0.03%)</title><rect x="29.4" y="117" width="0.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="32.41" y="127.5" ></text>
</g>
<g >
<title>__lruvec_stat_mod_folio (13,013,013 samples, 0.01%)</title><rect x="22.0" y="197" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="24.98" y="207.5" ></text>
</g>
<g >
<title>__libc_start_main (104,115,115,011 samples, 98.07%)</title><rect x="31.2" y="357" width="1157.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="34.23" y="367.5" >__libc_start_main</text>
</g>
<g >
<title> None,stdlib::memory::unsafe_pointer::UnsafePointer[::NoneType, {{0}}, {0}]) (51,051,051 samples, 0.05%)</title><rect x="1183.0" y="325" width="0.6" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1186.00" y="335.5" ></text>
</g>
<g >
<title>tlb_batch_pages_flush (17,017,017 samples, 0.02%)</title><rect x="29.6" y="85" width="0.1" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="32.56" y="95.5" ></text>
</g>
<g >
<title>get_page_from_freelist (48,048,048 samples, 0.05%)</title><rect x="224.8" y="149" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="227.81" y="159.5" ></text>
</g>
<g >
<title>exc_page_fault (158,158,158 samples, 0.15%)</title><rect x="223.9" y="309" width="1.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="226.94" y="319.5" ></text>
</g>
<g >
<title>clear_page_erms (45,045,045 samples, 0.04%)</title><rect x="224.8" y="133" width="0.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="227.83" y="143.5" ></text>
</g>
<g >
<title>alloc_anon_folio (59,059,059 samples, 0.06%)</title><rect x="224.7" y="213" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="227.73" y="223.5" ></text>
</g>
<g >
<title>stdlib::collections::list::List::__len__ (37,037,037 samples, 0.03%)</title><rect x="222.5" y="341" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="225.51" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (23,023,023 samples, 0.02%)</title><rect x="19.5" y="293" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="22.55" y="303.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (36,036,036 samples, 0.03%)</title><rect x="20.5" y="213" width="0.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="23.50" y="223.5" ></text>
</g>
<g >
<title>folio_add_new_anon_rmap (13,013,013 samples, 0.01%)</title><rect x="22.0" y="213" width="0.1" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="24.98" y="223.5" ></text>
</g>
<g >
<title>handle_pte_fault (159,159,159 samples, 0.15%)</title><rect x="20.5" y="245" width="1.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="23.46" y="255.5" ></text>
</g>
<g >
<title>do_user_addr_fault (158,158,158 samples, 0.15%)</title><rect x="223.9" y="293" width="1.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="226.94" y="303.5" ></text>
</g>
<g >
<title>stdlib::collections::list::List::__del__ (6,834,834,828 samples, 6.44%)</title><rect x="130.8" y="341" width="76.0" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="133.82" y="351.5" >stdlib::..</text>
</g>
<g >
<title>do_brk_flags (17,017,017 samples, 0.02%)</title><rect x="19.6" y="213" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="22.56" y="223.5" ></text>
</g>
<g >
<title>malloc@plt (22,022,022 samples, 0.02%)</title><rect x="1189.1" y="373" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1192.08" y="383.5" ></text>
</g>
<g >
<title>__default_morecore (27,027,027 samples, 0.03%)</title><rect x="19.5" y="325" width="0.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="22.50" y="335.5" ></text>
</g>
<g >
<title>stdlib::builtin::builtin_list::_LITRefPackHelper::get_loaded_kgen_pack (41,041,041 samples, 0.04%)</title><rect x="34.4" y="341" width="0.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="37.40" y="351.5" ></text>
</g>
<g >
<title>M::alignedAlloc (11,011,011 samples, 0.01%)</title><rect x="31.1" y="373" width="0.1" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="34.09" y="383.5" ></text>
</g>
<g >
<title>KGEN_CompilerRT_AlignedFree (76,076,076 samples, 0.07%)</title><rect x="32.2" y="341" width="0.9" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="35.21" y="351.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (16,016,016 samples, 0.02%)</title><rect x="29.6" y="69" width="0.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="32.56" y="79.5" ></text>
</g>
<g >
<title>stdlib::builtin::int::Int::__str__ (23,023,023 samples, 0.02%)</title><rect x="34.9" y="341" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="37.94" y="351.5" ></text>
</g>
<g >
<title>stdlib::builtin::string::String::format_sequence[*stdlib::utils::_format::Formattable] (184,184,184 samples, 0.17%)</title><rect x="121.2" y="341" width="2.0" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="124.20" y="351.5" ></text>
</g>
</g>
</svg>
